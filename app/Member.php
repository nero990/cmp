<?php

namespace App;

use App\Custom\Traits\GlobalScopes;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Cache;
use OwenIt\Auditing\Auditable;
use OwenIt\Auditing\Contracts\Auditable as AuditableContract;

class Member extends Model implements AuditableContract
{
    use Auditable, GlobalScopes, SoftDeletes;

    protected $fillable = [
        'first_name', 'middle_name', 'last_name', 'email', 'phones', 'gender', 'age_group', 'member_role_id',
        'marital_status', 'occupation', 'deceased_at'
    ];

    protected $casts = [
        'phones' => 'array',
    ];

    protected $appends = [
        'marital_status_text', 'age_group_text',
    ];

    const DONT_DISPLAY_AUDIT = ["id", "family_id", "member_role_id"];

    const AGE_GROUP_LIST = [
        '1' => "16-20",
        '2' => "21-25",
        '3' => "26-30",
        '4' => "31-35",
        '5' => "36-40",
        '6' => "41-45",
        '7' => "46-50",
        '8' => "50 and above"
    ];

    const MARITAL_STATUS_LIST = [
        '1' => "Single",
        '2' => "Married",
        '3' => "Not Wedded",
        '4' => "Divorced",
        '5' => "Church Annulment",
        '6' => "Widowed"
    ];

    protected static function boot()
    {
        static::creating(function(Member $member) {
            do{
                $member->membership_number = str_pad(rand(1,999999), "6", "0", 0);
            }while (static::whereMembershipNumber($member->membership_number)->exists());
        });

        static::saving(function ($member) {
            if(is_null($member->phones) || !is_array($member->phones)) $member->phones = [];
        });
        parent::boot(); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function transformAudit(array $data): array
    {
        $member_role_list = Cache::remember('member_role_list', 180, function() {
            return MemberRole::pluck('name', 'id')->toArray();
        });


        if(Arr::has($data, 'new_values.family_id')) {
            if(Arr::has($data, 'old_values.family_id') && !empty($this->getOriginal('family_id')))
                $data['old_values']['family_name'] = optional(Family::find($this->getOriginal('family_id')))->name;

            $data['new_values']['family_name'] = optional(Family::find($this->getAttribute('family_id')))->name;
        }

        if(Arr::has($data, 'new_values.member_role_id')) {

            if(Arr::has($data, 'old_values.member_role_id') && !empty($this->getOriginal('member_role_id')))
                $data['old_values']['role_name'] = $member_role_list[$this->getOriginal('member_role_id')];

            if(!empty($this->getAttribute('member_role_id')))
                $data['new_values']['role_name'] = $member_role_list[$this->getAttribute('member_role_id')];
        }

        return $data;
    }

    public function church_engagements() {
        return $this->belongsToMany(ChurchEngagement::class);
    }

    public function family() {
        return $this->belongsTo(Family::class);
    }

    public function role() {
        return $this->belongsTo(MemberRole::class, 'member_role_id');
    }

    public function sacrament_questions() {
        return $this->belongsToMany(SacramentQuestion::class);
    }
    
    public function member_sacrament_questions() {
        return $this->hasMany(MemberSacramentQuestion::class);
    }

    public function sick_member() {
        return $this->hasOne(SickMember::class);
    }

    public function scopeLiving($query) {
        return $query->whereNull('deceased_at');
    }

    public function scopeDeceased($query) {
        return $query->whereNotNull('deceased_at');
    }

    public static function auditTransformer($attribute, $modified) {
        $modified = auditableJsonToString("phones", $attribute, $modified);

        $modified = auditableValueToText('marital_status', static::class, $attribute, $modified);
        $modified = auditableValueToText('age_group', static::class, $attribute, $modified);
        $modified = auditableEmptyToNull($modified, $attribute, 'gender');
        $modified = auditableEmptyToNull($modified, $attribute, 'age_group');
        $modified = auditableEmptyToNull($modified, $attribute, 'marital_status');
        $modified = auditableEmptyToNull($modified, $attribute, 'occupation');
        $modified = auditableEmptyToNull($modified, $attribute, 'deceased_at');
        return $modified;
    }

    public static function getMaritalStatusText($marital_status) {
        return @static::MARITAL_STATUS_LIST[$marital_status];
    }

    public static function getAgeGroupText($age_group) {
        return @static::AGE_GROUP_LIST[$age_group];
    }

    public function getHead() {
        return $this->family->head;
    }

    public function getFullNameAttribute() {
        $middle_name = !empty($this->attributes['middle_name']) ? $this->attributes['middle_name'] . " " : "";
        return $this->attributes['first_name'] . " {$middle_name}" . $this->attributes['last_name'];
    }

    public function getMaritalStatusTextAttribute() {
        return static::getMaritalStatusText($this->attributes['marital_status']);
    }

    public function getAgeGroupTextAttribute() {
        return static::getAgeGroupText($this->attributes['age_group']);
    }
}