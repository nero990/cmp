<?php

namespace App;

use App\Events\UserCreated;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Arr;
use OwenIt\Auditing\Auditable;
use OwenIt\Auditing\Contracts\Auditable as AuditableContract;

class Family extends Model implements AuditableContract
{
    use Auditable;

    private static $required_headings;

    protected $fillable = [
        'registration_number', 'name', 'type', 'names_of_children', 'state_id', 'address', 'card_status', 'bcc_zone_id'
    ];

    protected $casts = [
        'names_of_children' => 'array'
    ];

    const CARD_STATUS = [
        "0" => "Not Paid",
        "1" => "Paid",
        "2" => "Collected"
    ];

    public static $batched = false;

    protected static function boot()
    {
        static::creating(function ($family) {
            if(!static::$batched) {
                $family->registration_number = rand();
            }

        });

        static::saving(function ($family) {

            if($family->type == "2" || is_null($family->names_of_children) || !is_array($family->names_of_children)) $family->names_of_children = [];
        });

        parent::boot(); // TODO: Change the autogenerated stub
        
        static::created(function ($family) {
            event(new UserCreated($family));
        });

    }

    /**
     * {@inheritdoc}
     */
    public function transformAudit(array $data): array
    {

        if(Arr::has($data, 'new_values.state_id')) {
            $data['old_values']['state'] = State::find($this->getOriginal('state_id'))->name;
            $data['new_values']['state'] = State::find($this->getAttribute('state_id'))->name;
        }

        if(Arr::has($data, 'new_values.bcc_zone_id')) {
            $data['old_values']['bcc_zone'] = BccZone::find($this->getOriginal('bcc_zone_id'))->name;
            $data['new_values']['bcc_zone'] = BccZone::find($this->getAttribute('bcc_zone_id'))->name;
        }

        return $data;
    }

    public function bcc_zone() {
        return $this->belongsTo(BccZone::class);
    }

    public function members() {
        return $this->hasMany(Member::class);
    }
    
    public function head() {
        return $this->hasOne(Member::class)->whereHas('role', function ($query) {
            $query->where('name', 'Head');
        });
    }

    public function state() {
        return $this->belongsTo(State::class);
    }

    public function user() {
        return $this->morphOne(User::class, 'person');
    }

    public function scopeFamily($query) {
        return $query->whereType('1');
    }

    public function scopeIndividual($query) {
        return $query->whereType('2');
    }

    public static function requiredHeadings()
    {
        return ['surname', 'first_name', 'no_of_children', 'names_of_children', 'address', 'contact', 'alt', 'state', 'family', 'single', 'family_reg_number'];
    }

    private static function setRequiredHeadings()
    {
        static::$required_headings = static::requiredHeadings();
    }

    /**
     * @param $headings
     * @return string
     */
    public static function validateHeadings($headings)
    {
        $missing_headings = [];
        static::setRequiredHeadings();
        foreach (static::$required_headings AS $heading) {
            if(!in_array($heading, $headings)) {
                $missing_headings[] = normal_case($heading);
            }
        }
        if(!empty($missing_headings)){

            $fields = join(', ', $missing_headings);
            $message = "File upload failed, because ";
            $message .= (count($missing_headings) > 1) ? "the following headers are missing: <b>{$fields}</b>" : "the <b>{$fields}</b> header is missing.";

            return $message;
        }
        return "";
    }

    public function getNumberOfChildrenAttribute() {
        return count($this->names_of_children) + $this->members()->whereHas('role', function($query) {
            $query->where('name', '<>', 'Head')
                ->where('name', '<>', 'Spouse');
            })->count();
    }

    public function getUsernameAttribute() {
        return $this->attributes['registration_number'];
    }

    public static function getTypeText($type) {
        switch ($type) {
            case "1" :
                return "Family";
            case "2" :
                return "Individual";
            default:
                return "";
        }
    }

    public function getTypeTextAttribute() {
        return static::getTypeText($this->attributes['type']);
    }

    public function setHead($familyHeadId) {
        if($current_family_head = $this->members->find($familyHeadId)) {
            $this->head->update([
                'member_role_id' => $current_family_head->member_role_id
            ]);

            $current_family_head->update([
                'member_role_id' => MemberRole::getHead()
            ]);
        }
    }

    public static function getCardStatusText($card_status) {
        return static::CARD_STATUS[$card_status];
    }

    public function getCardStatusTextAttribute() {
        return static::getCardStatusText($this->attributes['card_status']);
    }

    public function getHouseHoldAttribute() {
        return $this->members()->count() + count($this->names_of_children);
    }
}
