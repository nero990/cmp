<?php

namespace App;

use App\Events\UserCreated;
use Illuminate\Database\Eloquent\Model;
use OwenIt\Auditing\Auditable;
use OwenIt\Auditing\Contracts\Auditable as AuditableContract;

class Family extends Model implements AuditableContract
{
    use Auditable;

    protected $fillable = [
        'registration_number', 'name', 'type', 'names_of_children', 'state_id', 'address', 'card_status', 'bcc_zone_id'
    ];

    protected $casts = [
        'names_of_children' => 'array'
    ];

    const CARD_STATUS = [
        "0" => "Not Paid",
        "1" => "Paid",
        "2" => "Collected"
    ];

    public static $batched = false;

    protected static function boot()
    {
        static::creating(function ($family) {
            if(!static::$batched) {
                $family->registration_number = rand();
            }

        });

        static::saving(function ($family) {

            if($family->type == "2" || is_null($family->names_of_children) || !is_array($family->names_of_children)) $family->names_of_children = [];
        });

        parent::boot(); // TODO: Change the autogenerated stub
        
        static::created(function ($family) {
            event(new UserCreated($family));
        });

    }

    public function bcc_zone() {
        return $this->belongsTo(BccZone::class);
    }

    public function members() {
        return $this->hasMany(Member::class);
    }
    
    public function head() {
        return $this->hasOne(Member::class)->whereHas('role', function ($query) {
            $query->where('name', 'Head');
        });
    }

    public function state() {
        return $this->belongsTo(State::class);
    }

    public function user() {
        return $this->morphOne(User::class, 'person');
    }

    public function scopeFamily($query) {
        return $query->whereType('1');
    }

    public function scopeIndividual($query) {
        return $query->whereType('2');
    }

    public function getNumberOfChildrenAttribute() {
        return count($this->names_of_children) + $this->members()->whereHas('role', function($query) {
            $query->where('name', '<>', 'Head')
                ->where('name', '<>', 'Spouse');
            })->count();
    }

    public function getUsernameAttribute() {
        return $this->attributes['registration_number'];
    }

    public function getTypeTextAttribute() {
        switch ($this->attributes['type']) {
            case "1" :
                return "Family";
            case "2" :
                return "Individual";
            default:
                return "";
        }
    }

    public function setHead($familyHeadId) {
        if($current_family_head = $this->members->find($familyHeadId)) {
            $this->head->update([
                'member_role_id' => $current_family_head->member_role_id
            ]);

            $current_family_head->update([
                'member_role_id' => MemberRole::getHead()
            ]);
        }
    }

    public function getCardStatusTextAttribute() {
        return static::CARD_STATUS[$this->attributes['card_status']];
    }

    public function getHouseHoldAttribute() {
        return $this->members()->count() + count($this->names_of_children);
    }
}
